实验1 基础介绍及练习
概念 特殊符号
2.1 正则表达式特殊符号
[:alnum:]代表英文大小写字母及数字
[:alpha:]代表英文大小字母
[:blank:]代表空格和tab键
[:cntrl:]键盘上的控制按键，如 CR，LF，TAB，DEL
[:digit:]代表数字
[:graph:]代表空白字符以外的其他
[:lower:]小写字母
[:print:]可以被打印出来的任何字符
[:punct:]代表标点符号
[:upper:]代表大写字母
[:space:]任何会产生空白的字符如空格，tab.CR等
[:xdigit:]代表16进位的数字类型

2.2 特殊符号实例
任意建立一个 文本并编辑，或者 以原有的文本做实验皆可
touch regular_express.txt
vi regular_express.txt
文本内容：
"Open Source" is a good mechanism to develop programs.
apple is my favorite food.
Football game is not use feet only.
this dress doesn't fit me.
However, this dress is about $ 3183 dollars.
GNU is free air not free beer.
Her hair is very beauty.
I can't finish the test.
Oh! The soup taste good.
motorcycle is cheap than car.
This window is clear.
the symbol '*' is represented as start.
Oh!My god!
The gd software is a library for drafting programs.
You are the best is mean you are the no. 1.
The world <Happy> is the same with "glad".
I like dog.
google is the best tools for search keyword.
goooooogle yes!
go! go! Let's go.
# I am VBird

2.2.1 特殊符号实例
$  touch regular_express.txt
$  vi regular_express.txt 
 //或者  sudo gedit regular_express.txt

 查找小写字母：
 $ grep -n '[[:lower:]]' regular_express.txt 

 查找数字：
# grep -n '[[:digit:]]' regular_express.txt 

 2.3 语系对正则表达式的影响
由于不同语系的编码数据不同，所以造成不同语系的数据选取结果有所差异。以英文大小写为例，zh_CN.big5 及 C 这两种语系差异如下：

LANG=C 时： 0 1 2 3 4....ABCDE...Zabcde...z
LANG=zh_CN 时：0 1 2 3 4...aAbBcCdD.....zZ
在使用正则表达式[A-Z]时， LANG=C 的情况下，找到的仅仅是大写字符 ABCD..Z。而在 LANG=zh_CN 情况下，会选取到 AbBcCdD.....zZ 字符。因此在使用正则表达式时要特别留意语系。

由于我们一般使用的兼容与 POSIX 的标准，因此使用 C 语系。

实验 2
grep命令与正则表达式
1.2 实验知识点
grep命令；字符组匹配；行首行尾符；任意和重复字符；限定连续字符范围
1.3 实验环境 Ubuntu Linux 14.04 64位 Xfce 
参数说明：
-a ：将binary档案以text档案的方式搜寻数据
-c ：计算找到‘搜寻字符串’的次数
-i ：忽略大小写的不同，所以大小写视为相同
-n  :顺便输出行号
-v :反向选择，亦即显示出没有‘搜寻字符串’内容的那一行

grep -n 'the' regular_express.txt
grep -in 'the' regular_express.txt

反向查找 没有the才显示
grep -vn 'the' regular_express.txt

2.2 字符组匹配
[]中包含的任意一个字符。只能是一个
字符组支持由连字符“-”来表示一个范围
当“-”前后构成范围时，要求前面字符的码位小于后面字符的码位
[^...]排除型字符组。排除后面的字符

[abc]             ：表示“a”或“b”或“c”
[0-9]             ：表示 0-9 中任意一个数字，等价于[0123456789]
[\u4e00-\u9fa5]   ：表示人一个汉字
[^a1<]           ：表示除“a”、“1”、“<”外的任意一个字符
[^a-z]            :表示除小写字母外的任意一个字符

查找"tast“或者”test“两个字符
grep -n 't[ae]st' regular_express.txt

查找不包含”#“的字符串
grep -n '[^#]' regular_express.txt

查找字符 ‘oog’ ,如果我不想要‘oog’字符前面有g，则查找”[^g]oog“,同理
查找 ”[^go]oog“是指字符”oog“前面不能为g或o
grep -n 'oog' regular_express.txt
grep -n '[^g]oog' regular_express.txt
grep -n '[^go]oog' regular_express.txt

返回为空则表示没有匹配到满足要求的字符串

2.3 行首符^ 与行尾符$
只查找行首为the 的字符行：
grep -n '^the' regular_express.txt

查找行首为大写字母的所有行
‘[^A-Z]’ 表示以大写字母开头
‘^[A-Z]’ 表示除了大写字母A——Z的所有字符
grep -n '^[A-Z]' regular_express.txt

查找以字母d结尾的行
grep -n 'd$' reuglar_express.txt

查找空行
grep -n '^$' regular_express.txt

查看/etc/insserv.conf文档
'^$':过滤掉空白行
'^#':过滤掉注释行 #开头的
cat -n /etc/insserv.conf
grep -v '^$' /etc/insserv.conf | grep -v '^#'

2.4 任意一个字符”.“ 与重复字符”*“
查找a?ou?类型的字符
grep -n 'a.ou' regular_express.txt
a.ou. : 小数点表示任意一个字符，一个小数点只能表示一个未知字符

*（星号）：代表重复前面 0 个或者多个字符。
e*： 表示具有空字符或者一个以上 e 字符。
ee*，表示前面的第一个 e 字符必须存在。第二个 e 则可以是 0 个或者多个 e 字符。
eee*，表示前面两个 e 字符必须存在。第三个 e 则可以是 0 个或者多个 e 字符。
ee*e ：表示前面的第一个与第三个 e 字符必须存在。第二个 e 则可以是 0 个或者多个 e 字符。

下面的第一条命令与第二条命令由于允许存在空字符，所以会打印所有文本。
$ grep -n 'e*' regular_express.txt 
$ grep -n '@*' regular_express.txt 
$ grep -n 'eee*' regular_express.txt 

2.5 限定连续字符范围{ }
{ }可限制一个范围区间内的重复字符数。举个例子，若要找出 2~5 个 o 的连续字符串，如何做？ 此时便要用到{}了。由于 { 与 } 在 shell 中有特殊意义，需要用到转义字符\。
查找连续的两个 o 字符：
$ grep -n 'o\{2\}' regular_express.txt
结果与命令 grep -n 'ooo*' regular_express.txt 的结果相同。

查找 g 后面接 2 到 5 个 o，然后再接 g 的字符串
$ grep -n 'go\{2,5\}g' regular_express.txt 

总结：
^word    表示带搜寻的字符串(word)在行首
word$    表示带搜寻的字符串(word)在行尾
.(小数点) 表示 1 个任意字符
\        表示转义字符，在特殊字符前加\会将特殊字符意义去除
*        表示重复 0 到无穷多个前一个 RE(正则表达式)字符
[list]   表示搜索含有 l,i,s,t 任意字符的字符串
[n1-n2]  表示搜索指定的字符串范围,例如[0-9] [a-z] [A-Z]等
[^list]  表示反向字符串的范围,例如[^0-9]表示非数字字符，[^A-Z]表示非大写字符范围
\{n,m\}  表示找出 n 到 m 个前一个 RE 字符
\{n,\}   表示 n 个以上的前一个 RE 字符
